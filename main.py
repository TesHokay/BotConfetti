"""Entrypoint for the Confetti Telegram bot.

This module now contains a functional scenario for the Confetti studio bot.
The implementation mirrors the structure that is used in production while
remaining small enough for the accompanying exercises.

As in the original project we attempt to instantiate
``AIORateLimiter`` inside :func:`ConfettiTelegramBot._build_rate_limiter`.  If
the optional extra is missing the class is still importable but its
constructor raises a :class:`RuntimeError`.  We catch the exception and log a
warning which allows the bot to start without the rate limiter.
"""

from __future__ import annotations

import logging
import os
import random
import re
from datetime import datetime
from pathlib import Path
from collections.abc import Iterable
from dataclasses import dataclass, field
from typing import TYPE_CHECKING, Any, Dict, Optional, Union


TELEGRAM_IMPORT_ERROR: ModuleNotFoundError | None = None

_TELEGRAM_DEPENDENCY_INSTRUCTIONS = (
    "python-telegram-bot is required to run this project. "
    "Install it with 'pip install \"python-telegram-bot[rate-limiter]\"'."
)


class _MissingTelegramModule:
    """Placeholder that raises a helpful error when used without telegram."""

    def __getattr__(self, name: str) -> Any:  # pragma: no cover - guard clause
        if TELEGRAM_IMPORT_ERROR is not None:
            raise RuntimeError(_TELEGRAM_DEPENDENCY_INSTRUCTIONS) from TELEGRAM_IMPORT_ERROR
        raise RuntimeError(_TELEGRAM_DEPENDENCY_INSTRUCTIONS)


if TYPE_CHECKING:
    from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
    from telegram.ext import (
        AIORateLimiter as _AIORateLimiter,
        Application,
        ApplicationBuilder,
        CommandHandler,
        ContextTypes,
        ConversationHandler,
        MessageHandler,
        filters,
    )
else:  # pragma: no cover - import depends on environment
    try:
        from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
        from telegram.ext import (
            Application,
            ApplicationBuilder,
            CommandHandler,
            ContextTypes,
            ConversationHandler,
            MessageHandler,
            filters,
        )
    except ModuleNotFoundError as exc:  # pragma: no cover - environment specific
        TELEGRAM_IMPORT_ERROR = exc
        KeyboardButton = ReplyKeyboardMarkup = ReplyKeyboardRemove = Update = object  # type: ignore[assignment]
        Application = ApplicationBuilder = CommandHandler = ConversationHandler = MessageHandler = object  # type: ignore[assignment]
        ContextTypes = object  # type: ignore[assignment]
        filters = _MissingTelegramModule()  # type: ignore[assignment]
        _AIORateLimiter = None
    else:
        try:
            from telegram.ext import AIORateLimiter as _AIORateLimiter
        except ImportError:  # pragma: no cover - optional dependency
            _AIORateLimiter = None

AIORateLimiter = _AIORateLimiter


LOGGER = logging.getLogger(__name__)


ChatIdInput = Union[int, str]
AdminChatIdsInput = Union[ChatIdInput, Iterable[ChatIdInput], None]


def _require_telegram() -> None:
    """Ensure python-telegram-bot is installed before continuing."""

    if TELEGRAM_IMPORT_ERROR is not None:
        raise RuntimeError(_TELEGRAM_DEPENDENCY_INSTRUCTIONS) from TELEGRAM_IMPORT_ERROR


@dataclass
class BotContent:
    """Mutable content blocks that administrators can edit at runtime."""

    schedule: str
    about: str
    teachers: str
    payment: str
    album: str
    contacts: str
    vocabulary: list[dict[str, str]]

    @classmethod
    def default(cls) -> "BotContent":
        return cls(
            schedule=(
                "üá´üá∑ Voici nos horaires actuels :\n"
                "üá∑üá∫ –ù–∞—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
                "‚òÄÔ∏è Matin / –£—Ç—Ä–æ : 10:00 ‚Äì 12:00\n"
                "üå§ Apr√®s-midi / –î–µ–Ω—å : 14:00 ‚Äì 16:00\n"
                "üåô Soir / –í–µ—á–µ—Ä : 18:00 ‚Äì 20:00"
            ),
            about=(
                "üá´üá∑ √Ä propos de nous\n"
                "Notre compagnie existe d√©j√† depuis 8 ans, et pendant ce temps elle est devenue un lieu o√π les enfants d√©couvrent toute la beaut√© de la langue et de la culture fran√ßaises.\n"
                "Notre √©quipe est compos√©e uniquement de professionnels :\n"
                "‚Ä¢ des enseignants avec une formation sup√©rieure sp√©cialis√©e et des dipl√¥mes avec mention,\n"
                "‚Ä¢ des titulaires du certificat international DALF,\n"
                "‚Ä¢ des professeurs avec plus de 10 ans d‚Äôexp√©rience,\n"
                "‚Ä¢ ainsi que des locuteurs natifs qui partagent l‚Äôauthenticit√© de la culture fran√ßaise.\n"
                "Chaque ann√©e, nous participons √† des festivals francophones dans toute la Russie ‚Äî de Moscou et Saint-P√©tersbourg √† Ekaterinbourg et Valda√Ø. Nous nous produisons r√©guli√®rement sur les sc√®nes de notre ville (par exemple √† l‚Äô√©cole n¬∞ 22), nous organisons des f√™tes populaires en France, et nous cl√¥turons chaque saison par un √©v√©nement festif attendu par tous nos √©l√®ves.\n"
                "Notre objectif principal est simple mais essentiel : üëâ que les enfants tombent amoureux du fran√ßais ‚ù§Ô∏è\n\n"
                "üá∑üá∫ –û –Ω–∞—Å\n"
                "–ù–∞—à–∞ —Å—Ç—É–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É–∂–µ 8 –ª–µ—Ç, –∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω–∞ —Å—Ç–∞–ª–∞ –º–µ—Å—Ç–æ–º, –≥–¥–µ –¥–µ—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –¥–ª—è —Å–µ–±—è –∫—Ä–∞—Å–æ—Ç—É —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –∫—É–ª—å—Ç—É—Ä—ã.\n"
                "–° –Ω–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã:\n"
                "‚Ä¢ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å—à–∏–º –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –∫—Ä–∞—Å–Ω—ã–º–∏ –¥–∏–ø–ª–æ–º–∞–º–∏,\n"
                "‚Ä¢ –æ–±–ª–∞–¥–∞—Ç–µ–ª–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ DALF,\n"
                "‚Ä¢ –ø–µ–¥–∞–≥–æ–≥–∏ —Å–æ —Å—Ç–∞–∂–µ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç,\n"
                "‚Ä¢ –∞ —Ç–∞–∫–∂–µ –Ω–æ—Å–∏—Ç–µ–ª–∏ —è–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–º —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º –æ–ø—ã—Ç–æ–º.\n"
                "–ö–∞–∂–¥—ã–π –≥–æ–¥ –º—ã —É—á–∞—Å—Ç–≤—É–µ–º –≤–æ —Ñ—Ä–∞–Ω–∫–æ—Ñ–æ–Ω–Ω—ã—Ö —Ñ–µ—Å—Ç–∏–≤–∞–ª—è—Ö –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ ‚Äî –æ—Ç –ú–æ—Å–∫–≤—ã –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ –¥–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –∏ –í–∞–ª–¥–∞—è. –ú—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤—ã—Å—Ç—É–ø–∞–µ–º –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —à–∫–æ–ª–µ ‚Ññ 22), –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –ª—é–±–∏–º—ã–µ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏, –∏ –¥–µ–ª–∞–µ–º —è—Ä–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ–∑–æ–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ –∂–¥—É—Ç –≤—Å–µ –Ω–∞—à–∏ —É—á–µ–Ω–∏–∫–∏.\n"
                "–ù–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –ø—Ä–æ—Å—Ç–∞ –∏ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞: üëâ —á—Ç–æ–±—ã –¥–µ—Ç–∏ –ø–æ–ª—é–±–∏–ª–∏ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫ ‚ù§Ô∏è\n\n"
                "üé≠ Chez nous, Confetti = f√™te !\nüé≠ –£ –Ω–∞—Å –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ = —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫!"
            ),
            teachers=(
                "üá´üá∑ Nos enseignants sont passionn√©s et exp√©riment√©s.\n"
                "üá∑üá∫ –ù–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ ‚Äî —É–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∏ –æ–ø—ã—Ç–Ω—ã–µ –ø–µ–¥–∞–≥–æ–≥–∏.\n\n"
                "üë©‚Äçüè´ Ksenia Nastytsch\n"
                "Enseignante de fran√ßais avec plus de 20 ans d‚Äôexp√©rience.\n"
                "Dipl√¥m√©e de l‚ÄôUniversit√© d‚Äô√âtat de Perm en philologie (fran√ßais, anglais, allemand et espagnol).\n"
                "Titulaire du certificat international DALF, a effectu√© des stages en France (Grenoble, Pau, Metz).\n\n"
                "–ö—Å–µ–Ω–∏—è –ù–∞—Å—Ç—ã—á\n"
                "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 20 –ª–µ—Ç.\n"
                "–û–∫–æ–Ω—á–∏–ª–∞ –ü–µ—Ä–º—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ¬´–§–∏–ª–æ–ª–æ–≥–∏—è¬ª.\n"
                "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ DALF, –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏ (–ì—Ä–µ–Ω–æ–±–ª—å, –ü–æ, –ú–µ—Ü). –û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä—ë—Ö –ª–µ—Ç ¬´—Ä—É—Å—Å–∫–∏–µ —Å–µ–∑–æ–Ω—ã¬ª –≤ –ü–æ—Å–æ–ª—å—Å—Ç–≤–µ –†–æ—Å—Å–∏–∏ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏.\n\n"
                "üë©‚Äçüè´ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ë–∞–Ω–Ω–∏–∫–æ–≤–∞\n\n"
                "üá´üá∑ Alain Marinot\nLocuteur natif du fran√ßais avec un accent acad√©mique parisien. Acteur et √¢me de l‚Äô√©cole, il parle exclusivement en fran√ßais ‚Äî un grand avantage pour les √©l√®ves.\n\n"
                "üá∑üá∫ –ê–ª–µ–Ω –ú–∞—Ä–∏–Ω–æ\n–ù–æ—Å–∏—Ç–µ–ª—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–º –ø–∞—Ä–∏–∂—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º. –ê–∫—Ç—ë—Ä, –¥—É—à–∞ —à–∫–æ–ª—ã, –≥–æ–≤–æ—Ä–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ-—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏ ‚Äî –±–æ–ª—å—à–∞—è —É–¥–∞—á–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
                "üá´üá∑ Lyudmila Anatolievna Krasnoborova\nEnseignante de fran√ßais, docteur en philologie, ma√Ætresse de conf√©rences √† l‚ÄôUniversit√© d‚Äô√âtat de Perm (PGNIU).\n"
                "Examinateur DALF, pr√©pare aux examens du baccalaur√©at russe (–ï–ì–≠) et aux olympiades.\n\n"
                "üá∑üá∫ –ö—Ä–∞—Å–Ω–æ–±–æ—Ä–æ–≤–∞ –õ—é–¥–º–∏–ª–∞ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∫–∞–Ω–¥–∏–¥–∞—Ç —Ñ–∏–ª–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, –¥–æ—Ü–µ–Ω—Ç –ü–ì–ù–ò–£.\n"
                "–≠–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä DALF, –≥–æ—Ç–æ–≤–∏—Ç –∫ –ï–ì–≠ –∏ –æ–ª–∏–º–ø–∏–∞–¥–∞–º."
            ),
            payment=(
                "üá´üá∑ Veuillez envoyer une photo ou un re√ßu de paiement ici.\n"
                "üá∑üá∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.\n\n"
                "üìå Apr√®s v√©rification, nous confirmerons votre inscription.\n"
                "üìå –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤–∞—à—É –∑–∞–ø–∏—Å—å."
            ),
            album=(
                "üá´üá∑ Regardez nos meilleurs moments üé≠\n"
                "üá∑üá∫ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –ª—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã üé≠\n\n"
                "üëâ https://confetti.ru/album"
            ),
            contacts=(
                "üìû T√©l√©phone : +7 (900) 000-00-00\n"
                "üìß Email : confetti@example.com\n"
                "üåê Site / –°–∞–π—Ç : https://confetti.ru\n"
                "üì≤ Telegram : @ConfettiAdmin"
            ),
            vocabulary=[
                {
                    "word": "Soleil",
                    "emoji": "‚òÄÔ∏è",
                    "translation": "–°–æ–ª–Ω—Ü–µ",
                    "example_fr": "Le soleil brille.",
                    "example_ru": "–°–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç.",
                },
                {
                    "word": "Bonjour",
                    "emoji": "üëã",
                    "translation": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
                    "example_fr": "Bonjour, comment √ßa va ?",
                    "example_ru": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –¥–µ–ª–∞?",
                },
                {
                    "word": "Amiti√©",
                    "emoji": "ü§ù",
                    "translation": "–î—Ä—É–∂–±–∞",
                    "example_fr": "L'amiti√© rend la vie plus douce.",
                    "example_ru": "–î—Ä—É–∂–±–∞ –¥–µ–ª–∞–µ—Ç –∂–∏–∑–Ω—å –¥–æ–±—Ä–µ–µ.",
                },
                {
                    "word": "√âtoile",
                    "emoji": "‚ú®",
                    "translation": "–ó–≤–µ–∑–¥–∞",
                    "example_fr": "Chaque √©toile brille √† sa mani√®re.",
                    "example_ru": "–ö–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ —Å–∏—è–µ—Ç –ø–æ-—Å–≤–æ–µ–º—É.",
                },
            ],
        )

    def copy(self) -> "BotContent":
        return BotContent(
            schedule=self.schedule,
            about=self.about,
            teachers=self.teachers,
            payment=self.payment,
            album=self.album,
            contacts=self.contacts,
            vocabulary=[entry.copy() for entry in self.vocabulary],
        )


@dataclass
class ConfettiTelegramBot:
    """Light-weight wrapper around the PTB application builder."""

    token: str
    admin_chat_ids: AdminChatIdsInput = ()
    content_template: BotContent = field(default_factory=BotContent.default)

    REGISTRATION_PROGRAM = 1
    REGISTRATION_CHILD_NAME = 2
    REGISTRATION_CLASS = 3
    REGISTRATION_CONTACT_PERSON = 4
    REGISTRATION_PHONE = 5
    REGISTRATION_TIME = 6

    MAIN_MENU_BUTTON = "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    REGISTRATION_BUTTON = "üìù –ó–∞–ø–∏—Å—å / Inscription"
    ADMIN_MENU_BUTTON = "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    ADMIN_BACK_TO_USER_BUTTON = "‚¨ÖÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"
    ADMIN_BROADCAST_BUTTON = "üì£ –†–∞—Å—Å—ã–ª–∫–∞"
    ADMIN_VIEW_APPLICATIONS_BUTTON = "üì¨ –ó–∞—è–≤–∫–∏"
    ADMIN_EDIT_SCHEDULE_BUTTON = "üóì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    ADMIN_EDIT_ABOUT_BUTTON = "‚ÑπÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    ADMIN_EDIT_TEACHERS_BUTTON = "üë©‚Äçüè´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"
    ADMIN_EDIT_ALBUM_BUTTON = "üì∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º"
    ADMIN_EDIT_CONTACTS_BUTTON = "üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"
    ADMIN_EDIT_VOCABULARY_BUTTON = "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å"
    ADMIN_CANCEL_BUTTON = "üö´ –û—Ç–º–µ–Ω–∞"

    MAIN_MENU_LAYOUT = (
        (REGISTRATION_BUTTON, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ / Horaires"),
        ("‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏ / √Ä propos de nous", "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ / Enseignants"),
        ("üí≥ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ / Paiement", "üì∏ –§–æ—Ç–æ–∞–ª—å–±–æ–º / Album photo"),
        ("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã / Contact", "üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å–ª–æ–≤–∞ / Vocabulaire"),
    )

    TIME_OF_DAY_OPTIONS = (
        "‚òÄÔ∏è –£—Ç—Ä–æ / Matin",
        "üå§ –î–µ–Ω—å / Apr√®s-midi",
        "üåô –í–µ—á–µ—Ä / Soir",
    )

    PROGRAMS = (
        {
            "label": "üìö fran√ßais au quotidien / —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "audience": "–° 3 –ø–æ 11 –∫–ª–∞—Å—Å",
            "teacher": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å - –ù–∞—Å—Ç—ã—á –ö—Å–µ–Ω–∏—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞",
            "schedule": "–î–Ω–∏ –∑–∞–Ω—è—Ç–∏–π: –≤—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ —á–µ—Ç–≤–µ—Ä–≥ –≤–µ—á–µ—Ä",
        },
        {
            "label": "üé≠ th√©√¢tre francophone / —Ç–µ–∞—Ç—Ä –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º",
            "teacher": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å - –ù–∞—Å—Ç—ã—á –ö—Å–µ–Ω–∏—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞",
            "schedule": "–î–Ω–∏ –∑–∞–Ω—è—Ç–∏–π: –≤—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ —á–µ—Ç–≤–µ—Ä–≥ –≤–µ—á–µ—Ä",
        },
        {
            "label": "üìö fran√ßais du dimanche / –≤–æ—Å–∫—Ä–µ—Å–Ω—ã–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
            "audience": "1-4 –∫–ª–∞—Å—Å",
            "teacher": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å - –ë–∞–Ω–Ω–∏–∫–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞",
            "schedule": "–î–Ω–∏ –∑–∞–Ω—è—Ç–∏–π: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        },
        {
            "label": "üé≠ th√©√¢tre francophone / —Ç–µ–∞—Ç—Ä –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)",
            "teacher": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å - –ë–∞–Ω–Ω–∏–∫–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞",
            "schedule": "–î–Ω–∏ –∑–∞–Ω—è—Ç–∏–π: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        },
        {
            "label": "üá´üá∑ Fran√ßais au s√©rieux / –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –ø–æ-–≤–∑—Ä–æ—Å–ª–æ–º—É",
            "audience": "–ì—Ä—É–ø–ø–∞ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (–ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ)",
            "teacher": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å - –ö—Ä–∞—Å–Ω–æ–±–æ—Ä–æ–≤–∞ –õ—é–¥–º–∏–ª–∞ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞",
            "schedule": "–î–Ω–∏ –∑–∞–Ω—è—Ç–∏–π: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ / —á–µ—Ç–≤–µ—Ä–≥ / –ø—è—Ç–Ω–∏—Ü–∞",
        },
        {
            "label": "üë©üèº‚Äçüè´ cours en individuel / –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è",
        },
        {
            "label": "üçÇ Stage d'automne / –æ—Å–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ–Ω—Å–∏–≤",
        },
    )

    VOCABULARY = (
        {
            "word": "Soleil",
            "emoji": "‚òÄÔ∏è",
            "translation": "–°–æ–ª–Ω—Ü–µ",
            "example_fr": "Le soleil brille.",
            "example_ru": "–°–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç.",
        },
        {
            "word": "Bonjour",
            "emoji": "üëã",
            "translation": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
            "example_fr": "Bonjour, comment √ßa va ?",
            "example_ru": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –¥–µ–ª–∞?",
        },
        {
            "word": "Amiti√©",
            "emoji": "ü§ù",
            "translation": "–î—Ä—É–∂–±–∞",
            "example_fr": "L'amiti√© rend la vie plus douce.",
            "example_ru": "–î—Ä—É–∂–±–∞ –¥–µ–ª–∞–µ—Ç –∂–∏–∑–Ω—å –¥–æ–±—Ä–µ–µ.",
        },
        {
            "word": "√âtoile",
            "emoji": "‚ú®",
            "translation": "–ó–≤–µ–∑–¥–∞",
            "example_fr": "Chaque √©toile brille √† sa mani√®re.",
            "example_ru": "–ö–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ —Å–∏—è–µ—Ç –ø–æ-—Å–≤–æ–µ–º—É.",
        },
    )

    def build_application(self) -> Application:
        """Construct the PTB application."""

        _require_telegram()

        builder = ApplicationBuilder().token(self.token)

        limiter = self._build_rate_limiter()
        if limiter is not None:
            builder = builder.rate_limiter(limiter)

        application = builder.build()
        self._register_handlers(application)
        return application

    def __post_init__(self) -> None:
        self.admin_chat_ids = _normalise_admin_chat_ids(self.admin_chat_ids)

    def build_profile(self, chat: Any) -> "UserProfile":
        """Return the appropriate profile for ``chat``."""

        chat_id = _coerce_chat_id_from_object(chat)
        if self.is_admin_chat(chat_id):
            return AdminProfile(chat_id=chat_id)
        return UserProfile(chat_id=chat_id)

    def is_admin_chat(self, chat: Any) -> bool:
        """Return ``True`` when ``chat`` belongs to an administrator."""

        try:
            chat_id = _coerce_chat_id_from_object(chat)
        except ValueError:
            return False
        return chat_id in self.admin_chat_ids

    def _build_rate_limiter(self) -> Optional[AIORateLimiter]:  # type: ignore[name-defined]
        """Return an ``AIORateLimiter`` instance when possible."""

        if AIORateLimiter is None:
            LOGGER.warning(
                "python-telegram-bot was installed without the optional rate limiter extras. "
                "The bot will run without a rate limiter."
            )
            return None

        try:
            return AIORateLimiter()
        except RuntimeError as exc:  # pragma: no cover - depends on installation
            LOGGER.warning(
                "Failed to initialise the AIORateLimiter: %s. Running without a rate limiter.",
                exc,
            )
            return None

    # ------------------------------------------------------------------
    # Handler registration helpers

    def _register_handlers(self, application: Application) -> None:
        """Attach all command and message handlers to ``application``."""

        conversation = ConversationHandler(
            entry_points=[
                MessageHandler(
                    filters.Regex(self._exact_match_regex(self.REGISTRATION_BUTTON)),
                    self._start_registration,
                )
            ],
            states={
                self.REGISTRATION_PROGRAM: [
                    MessageHandler(
                        filters.Regex(self._programs_regex()),
                        self._registration_collect_program,
                    ),
                    MessageHandler(
                        filters.Regex(self._exact_match_regex(self.MAIN_MENU_BUTTON)),
                        self._registration_cancel,
                    ),
                ],
                self.REGISTRATION_CHILD_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._registration_collect_child_name),
                ],
                self.REGISTRATION_CLASS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._registration_collect_class),
                ],
                self.REGISTRATION_CONTACT_PERSON: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._registration_collect_contact_person),
                ],
                self.REGISTRATION_PHONE: [
                    MessageHandler(filters.CONTACT, self._registration_collect_phone_contact),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._registration_collect_phone_text),
                ],
                self.REGISTRATION_TIME: [
                    MessageHandler(
                        filters.Regex(self._time_regex()),
                        self._registration_collect_time,
                    ),
                    MessageHandler(
                        filters.Regex(self._exact_match_regex(self.MAIN_MENU_BUTTON)),
                        self._registration_cancel,
                    ),
                ],
            },
            fallbacks=[
                CommandHandler("cancel", self._registration_cancel),
                MessageHandler(
                    filters.Regex(self._exact_match_regex(self.MAIN_MENU_BUTTON)),
                    self._registration_cancel,
                ),
            ],
            allow_reentry=True,
        )

        application.add_handler(CommandHandler("start", self._start))
        application.add_handler(CommandHandler("menu", self._show_main_menu))
        application.add_handler(CommandHandler("admin", self._show_admin_menu))
        application.add_handler(conversation)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text))

    def _exact_match_regex(self, text: str) -> str:
        return rf"^{re.escape(text)}$"

    def _programs_regex(self) -> str:
        parts = [re.escape(program["label"]) for program in self.PROGRAMS]
        return rf"^({'|'.join(parts)})$"

    def _time_regex(self) -> str:
        parts = [re.escape(option) for option in self.TIME_OF_DAY_OPTIONS]
        return rf"^({'|'.join(parts)})$"

    # ------------------------------------------------------------------
    # Shared messaging helpers

    def _main_menu_markup(self, *, include_admin: bool = False) -> ReplyKeyboardMarkup:
        keyboard = [list(row) for row in self.MAIN_MENU_LAYOUT]
        if include_admin:
            keyboard.append([self.ADMIN_MENU_BUTTON])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def _main_menu_markup_for(self, update: Update) -> ReplyKeyboardMarkup:
        return self._main_menu_markup(include_admin=self._is_admin_update(update))

    def _admin_menu_markup(self) -> ReplyKeyboardMarkup:
        keyboard = [
            [self.ADMIN_BACK_TO_USER_BUTTON, self.ADMIN_CANCEL_BUTTON],
            [self.ADMIN_BROADCAST_BUTTON, self.ADMIN_VIEW_APPLICATIONS_BUTTON],
            [self.ADMIN_EDIT_SCHEDULE_BUTTON],
            [self.ADMIN_EDIT_ABOUT_BUTTON],
            [self.ADMIN_EDIT_TEACHERS_BUTTON],
            [self.ADMIN_EDIT_ALBUM_BUTTON],
            [self.ADMIN_EDIT_CONTACTS_BUTTON],
            [self.ADMIN_EDIT_VOCABULARY_BUTTON],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def _admin_cancel_markup(self) -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup([[self.ADMIN_CANCEL_BUTTON]], resize_keyboard=True)

    def _is_admin_update(self, update: Update) -> bool:
        chat = update.effective_chat
        return bool(chat and self.is_admin_chat(chat))

    def _application_data(self, context: ContextTypes.DEFAULT_TYPE) -> dict[str, Any]:
        """Return application-level storage across PTB versions."""

        if hasattr(context, "application_data"):
            return context.application_data  # type: ignore[attr-defined]

        if hasattr(context, "bot_data"):
            return context.bot_data  # type: ignore[attr-defined]

        application = getattr(context, "application", None)
        if application is not None and hasattr(application, "bot_data"):
            return application.bot_data  # type: ignore[attr-defined]

        # Fallback to a dedicated attribute to avoid repeated lookups if nothing matches.
        storage = getattr(context, "_fallback_application_data", None)
        if isinstance(storage, dict):
            return storage

        storage = {}
        setattr(context, "_fallback_application_data", storage)
        return storage

    def _remember_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        chat = update.effective_chat
        if not chat:
            return
        known = self._get_known_chats(context)
        known.add(_coerce_chat_id_from_object(chat))

    def _get_known_chats(self, context: ContextTypes.DEFAULT_TYPE) -> set[int]:
        store = self._application_data(context).setdefault("known_chats", set())
        if isinstance(store, set):
            return store
        if isinstance(store, list):
            converted: set[int] = set()
            for chat_id in store:
                try:
                    converted.add(_coerce_chat_id(chat_id))
                except ValueError:
                    continue
            self._application_data(context)["known_chats"] = converted
            return converted
        converted: set[int] = set()
        self._application_data(context)["known_chats"] = converted
        return converted

    def _get_content(self, context: ContextTypes.DEFAULT_TYPE) -> BotContent:
        content = self._application_data(context).get("content")
        if isinstance(content, BotContent):
            return content
        if isinstance(content, dict):
            # Backward compatibility if someone serialised a dict previously.
            restored = self.content_template.copy()
            self._application_data(context)["content"] = restored
            return restored
        fresh = self.content_template.copy()
        self._application_data(context)["content"] = fresh
        return fresh

    def _store_registration(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict[str, Any]
    ) -> None:
        chat = update.effective_chat
        user = update.effective_user
        record = {
            "program": data.get("program", ""),
            "child_name": data.get("child_name", ""),
            "class": data.get("class", ""),
            "contact_person": data.get("contact_person", ""),
            "phone": data.get("phone", ""),
            "time": data.get("time", ""),
            "chat_id": _coerce_chat_id_from_object(chat) if chat else None,
            "chat_title": getattr(chat, "title", None) if chat else None,
            "submitted_by": getattr(user, "full_name", None) if user else None,
            "submitted_by_id": getattr(user, "id", None) if user else None,
            "created_at": datetime.utcnow().strftime("%Y-%m-%d %H:%M"),
        }
        registrations = self._application_data(context).setdefault("registrations", [])
        if isinstance(registrations, list):
            registrations.append(record)
        else:
            self._application_data(context)["registrations"] = [record]

    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Send the greeting and display the main menu."""

        self._remember_chat(update, context)
        await self._send_greeting(update)

    async def _show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show the menu without repeating the full greeting."""

        self._remember_chat(update, context)
        message = (
            "üëâ Veuillez choisir une rubrique dans le menu ci-dessous.\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
        )
        if self._is_admin_update(update):
            message += (
                "\n\nüõ† –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –æ—Ç–∫—Ä–æ–π—Ç–µ ¬´–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª –≤ –º–µ–Ω—é."
                "\nüõ† Pour administrer le bot, choisissez ¬´–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª."
            )
        await self._reply(update, message, reply_markup=self._main_menu_markup_for(update))

    async def _show_admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not self._is_admin_update(update):
            await self._reply(
                update,
                "–≠—Ç–∞ –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n"
                "Ce panneau est r√©serv√© aux administrateurs.",
                reply_markup=self._main_menu_markup_for(update),
            )
            return
        self._remember_chat(update, context)
        message = (
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.\n"
            "Panneau d'administration ouvert ‚Äî choisissez une action."
        )
        await self._reply(update, message, reply_markup=self._admin_menu_markup())

    async def _send_greeting(self, update: Update) -> None:
        greeting = (
            "üéâ üá´üá∑ Bonjour et bienvenue dans la compagnie ¬´Confetti¬ª !\n"
            "üéâ üá∑üá∫ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é ¬´–ö–æ–Ω—Ñ–µ—Ç—Ç–∏¬ª!\n\n"
            "Nous adorons la France et le fran√ßais ‚Äî et nous sommes pr√™ts √† partager cet amour √† chacun.\n\n"
            "–ú—ã –æ–±–æ–∂–∞–µ–º –§—Ä–∞–Ω—Ü–∏—é –∏ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π ‚Äî –∏ –≥–æ—Ç–æ–≤—ã –¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π –ª—é–±–æ–≤—å—é —Å –∫–∞–∂–¥—ã–º.\n\n"
            "üëâ Veuillez choisir une rubrique dans le menu ci-dessous.\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
        )
        if self._is_admin_update(update):
            greeting += (
                "\n\nüõ† –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."
                "\nüõ† Vous pouvez g√©rer le contenu via le bouton ¬´–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª."
            )
        await self._reply(update, greeting, reply_markup=self._main_menu_markup_for(update))

    async def _reply(
        self,
        update: Update,
        text: str,
        *,
        reply_markup: Optional[ReplyKeyboardMarkup | ReplyKeyboardRemove] = None,
    ) -> None:
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup)

    # ------------------------------------------------------------------
    # Registration conversation

    async def _start_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["registration"] = {}
        message_lines = [
            "üá´üá∑ √Ä quel programme souhaitez-vous inscrire votre enfant ou vous inscrire ?",
            "üá∑üá∫ –ù–∞ –∫–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å —Å–µ–±—è?",
        ]
        details = [self._format_program_details(program) for program in self.PROGRAMS]
        await self._reply(
            update,
            "\n".join(message_lines + details),
            reply_markup=self._program_keyboard(),
        )
        return self.REGISTRATION_PROGRAM

    def _program_keyboard(self) -> ReplyKeyboardMarkup:
        keyboard = [[program["label"]] for program in self.PROGRAMS]
        keyboard.append([self.MAIN_MENU_BUTTON])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    def _format_program_details(self, program: Dict[str, str]) -> str:
        parts = [program["label"]]
        for key in ("audience", "teacher", "schedule"):
            if value := program.get(key):
                parts.append(value)
        return "\n".join(parts)

    async def _registration_collect_program(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        program_label = update.message.text
        context.user_data.setdefault("registration", {})["program"] = program_label
        await self._reply(
            update,
            "Merci ! / –°–ø–∞—Å–∏–±–æ! –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±—ë–Ω–∫–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return self.REGISTRATION_CHILD_NAME

    async def _registration_collect_child_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data.setdefault("registration", {})["child_name"] = update.message.text.strip()
        await self._reply(
            update,
            "üá´üá∑ Indiquez la classe, s'il vous pla√Æt.\nüá∑üá∫ –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–ª–∞—Å—Å.",
        )
        return self.REGISTRATION_CLASS

    async def _registration_collect_class(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data.setdefault("registration", {})["class"] = update.message.text.strip()
        await self._reply(
            update,
            "üá´üá∑ Qui est la personne de contact ?\nüá∑üá∫ –ö—Ç–æ –±—É–¥–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –ª–∏—Ü–æ–º?",
        )
        return self.REGISTRATION_CONTACT_PERSON

    async def _registration_collect_contact_person(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        context.user_data.setdefault("registration", {})["contact_person"] = update.message.text.strip()
        await self._reply(
            update,
            "üá´üá∑ Envoyez le num√©ro de t√©l√©phone (bouton en bas).\n"
            "üá∑üá∫ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É).",
            reply_markup=self._phone_keyboard(),
        )
        return self.REGISTRATION_PHONE

    def _phone_keyboard(self) -> ReplyKeyboardMarkup:
        keyboard = [
            [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
            [KeyboardButton(self.MAIN_MENU_BUTTON)],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    async def _registration_collect_phone_contact(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        phone_number = update.message.contact.phone_number
        context.user_data.setdefault("registration", {})["phone"] = phone_number
        return await self._prompt_time_of_day(update)

    async def _registration_collect_phone_text(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        text = update.message.text.strip()
        if text == self.MAIN_MENU_BUTTON:
            return await self._registration_cancel(update, context)
        context.user_data.setdefault("registration", {})["phone"] = text
        return await self._prompt_time_of_day(update)

    async def _prompt_time_of_day(self, update: Update) -> int:
        await self._reply(
            update,
            "üá´üá∑ Choisissez le moment qui vous convient.\n"
            "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π.",
            reply_markup=self._time_keyboard(),
        )
        return self.REGISTRATION_TIME

    def _time_keyboard(self) -> ReplyKeyboardMarkup:
        keyboard = [[option] for option in self.TIME_OF_DAY_OPTIONS]
        keyboard.append([self.MAIN_MENU_BUTTON])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    async def _registration_collect_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data.setdefault("registration", {})["time"] = update.message.text.strip()
        await self._send_registration_summary(update, context)
        await self._show_main_menu(update, context)
        return ConversationHandler.END

    async def _registration_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data.pop("registration", None)
        await self._reply(
            update,
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n‚ùå L'inscription est annul√©e.",
            reply_markup=self._main_menu_markup_for(update),
        )
        return ConversationHandler.END

    async def _send_registration_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        data = context.user_data.get("registration", {})
        summary = (
            "üá´üá∑ Votre demande a √©t√© enregistr√©e !\n"
            "üá∑üá∫ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            f"üë¶ Enfant : {data.get('child_name', '‚Äî')} ({data.get('class', '‚Äî')})\n"
            f"üë§ Contact : {data.get('contact_person', '‚Äî')}\n"
            f"üì± T√©l√©phone : {data.get('phone', '‚Äî')}\n"
            f"üïí Heure : {data.get('time', '‚Äî')}\n"
            f"üìö Programme : {data.get('program', '‚Äî')}\n\n"
            "Nous vous contacterons prochainement.\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        await self._reply(update, summary, reply_markup=self._main_menu_markup_for(update))
        self._store_registration(update, context, data)

    # ------------------------------------------------------------------
    # Menu handlers

    async def _handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not update.message:
            return

        self._remember_chat(update, context)

        text = (update.message.text or "").strip()
        if not text:
            return

        if text == self.MAIN_MENU_BUTTON:
            await self._show_main_menu(update, context)
            return

        profile = self.build_profile(update.effective_chat)
        pending = context.chat_data.get("pending_admin_action")

        if pending and profile.is_admin:
            if text == self.ADMIN_CANCEL_BUTTON:
                context.chat_data.pop("pending_admin_action", None)
                await self._reply(
                    update,
                    "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\nL'action est annul√©e.",
                    reply_markup=self._admin_menu_markup(),
                )
                return
            context.chat_data.pop("pending_admin_action", None)
            await self._dispatch_admin_action(update, context, pending, text)
            return

        if profile.is_admin:
            if text == self.ADMIN_MENU_BUTTON:
                await self._show_admin_menu(update, context)
                return
            if text == self.ADMIN_BACK_TO_USER_BUTTON:
                await self._show_main_menu(update, context)
                return
            if text == self.ADMIN_BROADCAST_BUTTON:
                context.chat_data["pending_admin_action"] = {"type": "broadcast"}
                await self._reply(
                    update,
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                    "Envoyez le message √† diffuser.",
                    reply_markup=self._admin_cancel_markup(),
                )
                return
            if text == self.ADMIN_VIEW_APPLICATIONS_BUTTON:
                await self._admin_show_registrations(update, context)
                return
            if text == self.ADMIN_EDIT_SCHEDULE_BUTTON:
                await self._prompt_admin_content_edit(
                    update,
                    context,
                    field="schedule",
                    instruction="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫).",
                )
                return
            if text == self.ADMIN_EDIT_ABOUT_BUTTON:
                await self._prompt_admin_content_edit(
                    update,
                    context,
                    field="about",
                    instruction="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ ¬´–û —Å—Ç—É–¥–∏–∏¬ª.",
                )
                return
            if text == self.ADMIN_EDIT_TEACHERS_BUTTON:
                await self._prompt_admin_content_edit(
                    update,
                    context,
                    field="teachers",
                    instruction="–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö.",
                )
                return
            if text == self.ADMIN_EDIT_ALBUM_BUTTON:
                await self._prompt_admin_content_edit(
                    update,
                    context,
                    field="album",
                    instruction="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º–∞.",
                )
                return
            if text == self.ADMIN_EDIT_CONTACTS_BUTTON:
                await self._prompt_admin_content_edit(
                    update,
                    context,
                    field="contacts",
                    instruction="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–ª–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
                )
                return
            if text == self.ADMIN_EDIT_VOCABULARY_BUTTON:
                await self._prompt_admin_vocabulary_edit(update, context)
                return

        await self._handle_menu_selection(update, context)

    async def _dispatch_admin_action(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        pending: Dict[str, Any],
        text: str,
    ) -> None:
        action_type = pending.get("type")
        if action_type == "broadcast":
            await self._admin_send_broadcast(update, context, text)
            return
        if action_type == "edit_content":
            field = pending.get("field")
            if isinstance(field, str):
                await self._admin_apply_content_update(update, context, field, text)
            else:
                await self._reply(
                    update,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫.\n"
                    "Impossible d'identifier la section √† modifier.",
                    reply_markup=self._admin_menu_markup(),
                )
            return
        if action_type == "edit_vocabulary":
            success = await self._admin_apply_vocabulary_update(update, context, text)
            if not success:
                context.chat_data["pending_admin_action"] = pending
            return
        await self._reply(
            update,
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\nAction administrateur inconnue.",
            reply_markup=self._admin_menu_markup(),
        )

    async def _prompt_admin_content_edit(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        *,
        field: str,
        instruction: str,
    ) -> None:
        content = self._get_content(context)
        if not hasattr(content, field):
            await self._reply(
                update,
                "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.\nCette section ne peut pas √™tre modifi√©e.",
                reply_markup=self._admin_menu_markup(),
            )
            return
        context.chat_data["pending_admin_action"] = {"type": "edit_content", "field": field}
        current_value = getattr(content, field)
        message = (
            f"{instruction}\n"
            "\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:"
            f"\n{current_value}"
        )
        await self._reply(update, message, reply_markup=self._admin_cancel_markup())

    async def _prompt_admin_vocabulary_edit(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        content = self._get_content(context)
        context.chat_data["pending_admin_action"] = {"type": "edit_vocabulary"}
        serialized_entries = []
        for entry in content.vocabulary:
            serialized_entries.append(
                "|".join(
                    [
                        entry.get("word", ""),
                        entry.get("emoji", ""),
                        entry.get("translation", ""),
                        entry.get("example_fr", ""),
                        entry.get("example_ru", ""),
                    ]
                )
            )
        sample = "\n".join(serialized_entries) if serialized_entries else "(–ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π)"
        message = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–ª–æ–≤–æ|—ç–º–æ–¥–∑–∏|–ø–µ—Ä–µ–≤–æ–¥|–ø—Ä–∏–º–µ—Ä FR|–ø—Ä–∏–º–µ—Ä RU."
            "\n–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ ‚Äî –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."
            "\nEnvoyez les entr√©es sous forme: mot|emoji|traduction|phrase FR|phrase RU."
            f"\n\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n{sample}"
        )
        await self._reply(update, message, reply_markup=self._admin_cancel_markup())

    async def _admin_send_broadcast(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str
    ) -> None:
        known_chats = self._get_known_chats(context)
        if not known_chats:
            await self._reply(
                update,
                "–ü–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\nAucun chat connu pour la diffusion.",
                reply_markup=self._admin_menu_markup(),
            )
            return

        successes = 0
        failures: list[str] = []
        for chat_id in sorted(known_chats):
            try:
                await context.bot.send_message(chat_id=chat_id, text=message)
                successes += 1
            except Exception as exc:  # pragma: no cover - network dependent
                LOGGER.warning("Failed to send broadcast to %s: %s", chat_id, exc)
                failures.append(str(chat_id))

        result = (
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successes} –∏–∑ {len(known_chats)} —á–∞—Ç–æ–≤.\n"
            f"Diffusion envoy√©e: {successes} / {len(known_chats)}."
        )
        if failures:
            result += "\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç—ã: " + ", ".join(failures)
        await self._reply(update, result, reply_markup=self._admin_menu_markup())

    async def _admin_show_registrations(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        registrations = self._application_data(context).get("registrations", [])
        if not isinstance(registrations, list) or not registrations:
            await self._reply(
                update,
                "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.\nAucune demande enregistr√©e pour l'instant.",
                reply_markup=self._admin_menu_markup(),
            )
            return

        lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–¥–æ 10):"]
        for index, record in enumerate(reversed(registrations[-10:]), start=1):
            child = record.get("child_name") or "‚Äî"
            klass = record.get("class") or "‚Äî"
            program = record.get("program") or "‚Äî"
            contact = record.get("contact_person") or "‚Äî"
            phone = record.get("phone") or "‚Äî"
            created = record.get("created_at") or "‚Äî"
            lines.append(
                f"{index}. {child} ({klass})\n"
                f"   –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program}\n"
                f"   –ö–æ–Ω—Ç–∞–∫—Ç: {contact} | {phone}\n"
                f"   –í—Ä–µ–º—è: {record.get('time') or '‚Äî'} | –î–æ–±–∞–≤–ª–µ–Ω–æ: {created}"
            )
        message = "\n\n".join(lines)
        await self._reply(update, message, reply_markup=self._admin_menu_markup())

    async def _admin_apply_content_update(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, field: str, value: str
    ) -> None:
        content = self._get_content(context)
        if not hasattr(content, field):
            await self._reply(
                update,
                "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.\nCette section ne peut pas √™tre modifi√©e.",
                reply_markup=self._admin_menu_markup(),
            )
            return
        setattr(content, field, value)
        await self._reply(
            update,
            "–†–∞–∑–¥–µ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!\nLa section a √©t√© mise √† jour.",
            reply_markup=self._admin_menu_markup(),
        )

    async def _admin_apply_vocabulary_update(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, payload: str
    ) -> bool:
        lines = [line.strip() for line in payload.splitlines() if line.strip()]
        if not lines:
            await self._reply(
                update,
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏.\nVeuillez fournir au moins une entr√©e.",
                reply_markup=self._admin_cancel_markup(),
            )
            return False

        entries: list[dict[str, str]] = []
        for line in lines:
            parts = [part.strip() for part in line.split("|")]
            if len(parts) != 5:
                await self._reply(
                    update,
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 5 —á–∞—Å—Ç–µ–π —á–µ—Ä–µ–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —á–µ—Ä—Ç—É.|\n"
                    "Format incorrect: 5 √©l√©ments s√©par√©s par |.",
                    reply_markup=self._admin_cancel_markup(),
                )
                return False
            entries.append(
                {
                    "word": parts[0],
                    "emoji": parts[1],
                    "translation": parts[2],
                    "example_fr": parts[3],
                    "example_ru": parts[4],
                }
            )

        content = self._get_content(context)
        content.vocabulary = entries
        await self._reply(
            update,
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–æ–≤: {len(entries)}.\nNombre d'entr√©es: {len(entries)}.",
            reply_markup=self._admin_menu_markup(),
        )
        return True


    async def _handle_menu_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text = (update.message.text or "").strip()
        handlers = {
            "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ / Horaires": self._send_schedule,
            "‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏ / √Ä propos de nous": self._send_about,
            "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ / Enseignants": self._send_teachers,
            "üí≥ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ / Paiement": self._send_payment_instructions,
            "üì∏ –§–æ—Ç–æ–∞–ª—å–±–æ–º / Album photo": self._send_album,
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã / Contact": self._send_contacts,
            "üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å–ª–æ–≤–∞ / Vocabulaire": self._send_vocabulary,
        }

        handler = handlers.get(text)
        if handler is None:
            await self._reply(
                update,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.\n"
                "Merci de choisir une option dans le menu ci-dessous.",
                reply_markup=self._main_menu_markup_for(update),
            )
            return
        await handler(update, context)

    async def _send_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        content = self._get_content(context)
        await self._reply(update, content.schedule, reply_markup=self._main_menu_markup_for(update))

    async def _send_about(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        content = self._get_content(context)
        await self._reply(update, content.about, reply_markup=self._main_menu_markup_for(update))

    async def _send_teachers(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        content = self._get_content(context)
        await self._reply(update, content.teachers, reply_markup=self._main_menu_markup_for(update))

    async def _send_payment_instructions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        content = self._get_content(context)
        await self._reply(update, content.payment, reply_markup=self._main_menu_markup_for(update))

    async def _send_album(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        content = self._get_content(context)
        await self._reply(update, content.album, reply_markup=self._main_menu_markup_for(update))

    async def _send_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        content = self._get_content(context)
        await self._reply(update, content.contacts, reply_markup=self._main_menu_markup_for(update))

    async def _send_vocabulary(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        content = self._get_content(context)
        if not content.vocabulary:
            await self._reply(
                update,
                "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.\n"
                "La liste de vocabulaire est vide pour le moment.",
                reply_markup=self._main_menu_markup_for(update),
            )
            return
        entry = random.choice(content.vocabulary)
        text = (
            "üéÅ Mot du jour / –°–ª–æ–≤–æ –¥–Ω—è :\n\n"
            f"üá´üá∑ {entry.get('word', '‚Äî')} {entry.get('emoji', '')}\n"
            f"üá∑üá∫ {entry.get('translation', '‚Äî')}\n\n"
            f"üí¨ Exemple : {entry.get('example_fr', '‚Äî')} ‚Äî {entry.get('example_ru', '‚Äî')}"
        )
        await self._reply(update, text, reply_markup=self._main_menu_markup_for(update))


@dataclass(frozen=True)
class UserProfile:
    """Representation of a standard chat profile."""

    chat_id: int
    role: str = field(init=False, default="user")

    @property
    def is_admin(self) -> bool:
        return False


@dataclass(frozen=True)
class AdminProfile(UserProfile):
    """Profile granted elevated permissions."""

    role: str = field(init=False, default="admin")

    @property
    def is_admin(self) -> bool:
        return True


def _normalise_admin_chat_ids(chat_ids: AdminChatIdsInput) -> frozenset[int]:
    """Return a normalised, deduplicated set of admin chat identifiers."""

    result: set[int] = set()
    for candidate in _iter_chat_id_candidates(chat_ids):
        for part in _split_candidate(candidate):
            result.add(_coerce_chat_id(part))
    return frozenset(result)


def _iter_chat_id_candidates(value: AdminChatIdsInput) -> Iterable[ChatIdInput]:
    if value is None:
        return ()
    if isinstance(value, (str, bytes)):
        return (value,)
    if isinstance(value, Iterable):
        return tuple(value)
    return (value,)


def _split_candidate(candidate: ChatIdInput) -> Iterable[ChatIdInput]:
    if isinstance(candidate, str):
        parts = [part.strip() for part in candidate.split(",")]
        return tuple(part for part in parts if part)
    return (candidate,)


def _coerce_chat_id(value: ChatIdInput) -> int:
    if isinstance(value, bool):
        raise ValueError("Boolean values cannot represent a chat id")
    if isinstance(value, str):
        stripped = value.strip()
        if not stripped:
            raise ValueError("Chat id strings cannot be empty")
        value = stripped
    try:
        return int(value)
    except (TypeError, ValueError) as exc:  # pragma: no cover - guard clause
        raise ValueError(f"Invalid chat id: {value!r}") from exc


def _coerce_chat_id_from_object(chat: Any) -> int:
    if hasattr(chat, "id"):
        chat = getattr(chat, "id")
    return _coerce_chat_id(chat)  # type: ignore[arg-type]


def main() -> None:  # pragma: no cover - thin wrapper
    """Entry point used by the console script in the original project."""

    logging.basicConfig(level=logging.INFO)

    _load_environment_files()

    token = _resolve_bot_token()
    if token is None:
        LOGGER.error(
            "Bot token is not configured. Set one of %s or provide a file path via %s",
            ", ".join(TOKEN_ENVIRONMENT_KEYS),
            ", ".join(TOKEN_FILE_ENVIRONMENT_KEYS),
        )
        raise SystemExit(1)

    admin_chat_ids = os.environ.get("CONFETTI_ADMIN_CHAT_IDS", "")

    try:
        _require_telegram()
    except RuntimeError as exc:
        LOGGER.error("%s", exc)
        raise SystemExit(1) from exc

    bot = ConfettiTelegramBot(token=token, admin_chat_ids=admin_chat_ids)
    application = bot.build_application()
    # The original project keeps polling outside of the kata scope.  We expose
    # the configured application so that callers can decide how to run it.
    application.run_polling()


TOKEN_ENVIRONMENT_KEYS: tuple[str, ...] = (
    "CONFETTI_BOT_TOKEN",
    "TELEGRAM_BOT_TOKEN",
    "BOT_TOKEN",
    "TELEGRAM_TOKEN",
    "CONFETTI_TOKEN",
)

TOKEN_FILE_ENVIRONMENT_KEYS: tuple[str, ...] = (
    "CONFETTI_BOT_TOKEN_FILE",
    "TELEGRAM_BOT_TOKEN_FILE",
    "BOT_TOKEN_FILE",
    "TELEGRAM_TOKEN_FILE",
    "CONFETTI_BOT_TOKEN_PATH",
)


def _resolve_bot_token() -> Optional[str]:
    """Read the bot token from the environment and validate it."""

    for key in TOKEN_ENVIRONMENT_KEYS:
        token = os.environ.get(key)
        if token:
            token = token.strip()
            if token and token != "TOKEN_PLACEHOLDER":
                return token

    for key in TOKEN_FILE_ENVIRONMENT_KEYS:
        token_path = os.environ.get(key)
        if token_path:
            token = _read_token_file(Path(token_path))
            if token:
                return token
    return None


def _load_environment_files() -> None:
    """Populate ``os.environ`` with values from common dotenv files."""

    base_dir = Path(__file__).resolve().parent
    for filename in (".env", ".env.local"):
        _apply_env_file(base_dir / filename)


def _apply_env_file(path: Path) -> None:
    if not path.exists() or not path.is_file():
        return

    try:
        content = path.read_text(encoding="utf-8")
    except OSError as exc:  # pragma: no cover - filesystem dependent
        LOGGER.warning("Failed to read environment file %s: %s", path, exc)
        return

    for line in content.splitlines():
        parsed = _parse_env_assignment(line)
        if not parsed:
            continue
        key, value = parsed
        if key in os.environ:
            continue
        os.environ[key] = value


def _parse_env_assignment(line: str) -> Optional[tuple[str, str]]:
    """Parse a dotenv-style assignment returning ``(key, value)`` when valid."""

    stripped = line.strip()
    if not stripped or stripped.startswith("#"):
        return None

    if stripped.startswith("export "):
        stripped = stripped[len("export ") :].lstrip()

    if "=" not in stripped:
        LOGGER.debug("Ignoring malformed environment line: %s", line)
        return None

    key, value = stripped.split("=", 1)
    key = key.strip()
    value = value.strip()

    if not key:
        LOGGER.debug("Ignoring environment line with empty key: %s", line)
        return None

    if value and value[0] == value[-1] and value[0] in {'"', "'"}:
        value = value[1:-1]

    return key, value


def _read_token_file(path: Path) -> Optional[str]:
    try:
        token = path.read_text(encoding="utf-8").strip()
    except OSError as exc:  # pragma: no cover - filesystem dependent
        LOGGER.warning("Unable to read token file %s: %s", path, exc)
        return None

    if token and token != "TOKEN_PLACEHOLDER":
        return token
    return None


if __name__ == "__main__":  # pragma: no cover - module executable guard
    main()
